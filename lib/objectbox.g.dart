// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'database/entity/note.dart';
import 'database/entity/notebook.dart';
import 'database/entity/tag.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2316079523711971685),
      name: 'Note',
      lastPropertyId: const IdUid(10, 7303132356753889275),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8080678384166238745),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7098960471466229012),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4262212420943084956),
            name: 'notebookId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6928125577199823912),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8420037946000345695),
            name: 'content',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5779439842405884447),
            name: 'createdTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7152875301481954586),
            name: 'updatedTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1165543312835010593),
            name: 'deleted',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 713178703130774028),
            name: 'encrypted',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7303132356753889275),
            name: 'synced',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1603758049977200031),
      name: 'NoteBook',
      lastPropertyId: const IdUid(7, 5808698125903124583),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9021676285066536248),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1641153853661923438),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 136765507824177696),
            name: 'pid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8713373020954039050),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6251790359403917076),
            name: 'createdTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2424751303386619442),
            name: 'updatedTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5808698125903124583),
            name: 'deleted',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 9179414022122330500),
      name: 'Tag',
      lastPropertyId: const IdUid(6, 1137877032221080913),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2968144532248398034),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8747076394469313137),
            name: 'uuid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5156137234548363361),
            name: 'text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4082479014541581719),
            name: 'createdTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6245822570672081958),
            name: 'updatedTime',
            type: 12,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1137877032221080913),
            name: 'noteId',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 9179414022122330500),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Note: EntityDefinition<Note>(
        model: _entities[0],
        toOneRelations: (Note object) => [],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final notebookIdOffset = object.notebookId == null
              ? null
              : fbb.writeString(object.notebookId!);
          final titleOffset = fbb.writeString(object.title);
          final contentOffset = fbb.writeString(object.content);
          final encryptedOffset = fbb.writeString(object.encrypted);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, notebookIdOffset);
          fbb.addOffset(3, titleOffset);
          fbb.addOffset(4, contentOffset);
          fbb.addInt64(5, object.createdTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(6, object.updatedTime.microsecondsSinceEpoch * 1000);
          fbb.addBool(7, object.deleted);
          fbb.addOffset(8, encryptedOffset);
          fbb.addBool(9, object.synced);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Note(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0) /
                          1000)
                      .round()),
              DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0) /
                          1000)
                      .round()))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..notebookId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..deleted =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 18, false)
            ..encrypted = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 20, '')
            ..synced =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false);

          return object;
        }),
    NoteBook: EntityDefinition<NoteBook>(
        model: _entities[1],
        toOneRelations: (NoteBook object) => [],
        toManyRelations: (NoteBook object) => {},
        getId: (NoteBook object) => object.id,
        setId: (NoteBook object, int id) {
          object.id = id;
        },
        objectToFB: (NoteBook object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final pidOffset =
              object.pid == null ? null : fbb.writeString(object.pid!);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, pidOffset);
          fbb.addOffset(3, titleOffset);
          fbb.addInt64(4, object.createdTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(5, object.updatedTime.microsecondsSinceEpoch * 1000);
          fbb.addBool(6, object.deleted);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = NoteBook(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0) /
                          1000)
                      .round()),
              DateTime.fromMicrosecondsSinceEpoch(
                  (const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0) /
                          1000)
                      .round()))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..pid = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..deleted =
                const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);

          return object;
        }),
    Tag: EntityDefinition<Tag>(
        model: _entities[2],
        toOneRelations: (Tag object) => [],
        toManyRelations: (Tag object) => {},
        getId: (Tag object) => object.id,
        setId: (Tag object, int id) {
          object.id = id;
        },
        objectToFB: (Tag object, fb.Builder fbb) {
          final uuidOffset = fbb.writeString(object.uuid);
          final textOffset = fbb.writeString(object.text);
          final noteIdOffset =
              object.noteId == null ? null : fbb.writeString(object.noteId!);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, uuidOffset);
          fbb.addOffset(2, textOffset);
          fbb.addInt64(3, object.createdTime.microsecondsSinceEpoch * 1000);
          fbb.addInt64(4, object.updatedTime.microsecondsSinceEpoch * 1000);
          fbb.addOffset(5, noteIdOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Tag()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..uuid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..text = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..createdTime = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0) /
                        1000)
                    .round())
            ..updatedTime = DateTime.fromMicrosecondsSinceEpoch(
                (const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0) /
                        1000)
                    .round())
            ..noteId = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 14);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.id]
  static final id = QueryIntegerProperty<Note>(_entities[0].properties[0]);

  /// see [Note.uuid]
  static final uuid = QueryStringProperty<Note>(_entities[0].properties[1]);

  /// see [Note.notebookId]
  static final notebookId =
      QueryStringProperty<Note>(_entities[0].properties[2]);

  /// see [Note.title]
  static final title = QueryStringProperty<Note>(_entities[0].properties[3]);

  /// see [Note.content]
  static final content = QueryStringProperty<Note>(_entities[0].properties[4]);

  /// see [Note.createdTime]
  static final createdTime =
      QueryIntegerProperty<Note>(_entities[0].properties[5]);

  /// see [Note.updatedTime]
  static final updatedTime =
      QueryIntegerProperty<Note>(_entities[0].properties[6]);

  /// see [Note.deleted]
  static final deleted = QueryBooleanProperty<Note>(_entities[0].properties[7]);

  /// see [Note.encrypted]
  static final encrypted =
      QueryStringProperty<Note>(_entities[0].properties[8]);

  /// see [Note.synced]
  static final synced = QueryBooleanProperty<Note>(_entities[0].properties[9]);
}

/// [NoteBook] entity fields to define ObjectBox queries.
class NoteBook_ {
  /// see [NoteBook.id]
  static final id = QueryIntegerProperty<NoteBook>(_entities[1].properties[0]);

  /// see [NoteBook.uuid]
  static final uuid = QueryStringProperty<NoteBook>(_entities[1].properties[1]);

  /// see [NoteBook.pid]
  static final pid = QueryStringProperty<NoteBook>(_entities[1].properties[2]);

  /// see [NoteBook.title]
  static final title =
      QueryStringProperty<NoteBook>(_entities[1].properties[3]);

  /// see [NoteBook.createdTime]
  static final createdTime =
      QueryIntegerProperty<NoteBook>(_entities[1].properties[4]);

  /// see [NoteBook.updatedTime]
  static final updatedTime =
      QueryIntegerProperty<NoteBook>(_entities[1].properties[5]);

  /// see [NoteBook.deleted]
  static final deleted =
      QueryBooleanProperty<NoteBook>(_entities[1].properties[6]);
}

/// [Tag] entity fields to define ObjectBox queries.
class Tag_ {
  /// see [Tag.id]
  static final id = QueryIntegerProperty<Tag>(_entities[2].properties[0]);

  /// see [Tag.uuid]
  static final uuid = QueryStringProperty<Tag>(_entities[2].properties[1]);

  /// see [Tag.text]
  static final text = QueryStringProperty<Tag>(_entities[2].properties[2]);

  /// see [Tag.createdTime]
  static final createdTime =
      QueryIntegerProperty<Tag>(_entities[2].properties[3]);

  /// see [Tag.updatedTime]
  static final updatedTime =
      QueryIntegerProperty<Tag>(_entities[2].properties[4]);

  /// see [Tag.noteId]
  static final noteId = QueryStringProperty<Tag>(_entities[2].properties[5]);
}
